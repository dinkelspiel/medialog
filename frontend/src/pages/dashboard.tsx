import Entry from "@/components/entry";
import Az from "@/components/icons/az";
import Eye from "@/components/icons/eye";
import Pen from "@/components/icons/pen";
import Sort from "@/components/icons/sort";
import Star from "@/components/icons/star";
import StarOutline from "@/components/icons/starOutline";
import Xmark from "@/components/icons/xmark";
import Sidebar from "@/components/sidebar";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";

type UserEntryStatus = "planning" | "watching" | "dnf" | "paused" | "completed";

interface UserEntry {
  franchiseName: string;
  entryName: string;
  coverUrl: string;
  updatedAt: string;
  rating: number;
  status: UserEntryStatus;
}

export default function Home() {
  let [showFilters, setShowFilters] = useState<boolean>(false);
  let [userEntries, setUserEntries] = useState<UserEntry[]>([]);

  useEffect(() => {
    const fetchEntries = async () => {
      const response = await fetch("http://localhost/api/users/41/entries", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      response.json().then(
        (
          data: {
            franchise_name: string;
            entry_name: string;
            cover_url: string;
            updated_at: string;
            rating: number;
            status: UserEntryStatus;
          }[],
        ) => {
          setUserEntries(
            data.map((userEntry) => {
              return {
                franchiseName: userEntry.franchise_name,
                entryName: userEntry.entry_name,
                coverUrl: userEntry.cover_url,
                updatedAt: userEntry.updated_at,
                rating: userEntry.rating,
                status: userEntry.status,
              } as UserEntry;
            }),
          );
        },
      );
    };

    fetchEntries();
  }, []);

  return (
    <>
      <Head>
        <title>Medialog</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="grid w-[100dvw] grid-cols-[256px,1fr] text-slate-900">
        <Sidebar />
        <div className="flex flex-row gap-4 px-8 py-6">
          <div className="w-full">
            <div className="flex w-full flex-col gap-4  border-b border-slate-200 pb-4">
              <div className="flex flex-row ">
                <div className="flex w-full flex-col">
                  <div className="text-2xl font-semibold">My Media</div>
                  <div className="text-sm text-slate-500">
                    Search through your entire media catalogue
                  </div>
                </div>
                <div className="flex w-full justify-end gap-3">
                  <Tabs defaultValue="rating">
                    <TabsList>
                      <TabsTrigger value="rating" className="gap-3">
                        <Star /> Rating
                      </TabsTrigger>
                      <TabsTrigger value="az" className="gap-3">
                        <Az /> A-Z
                      </TabsTrigger>
                      <TabsTrigger value="watched" className="gap-3">
                        <Eye /> Watched
                      </TabsTrigger>
                      <TabsTrigger value="updated" className="gap-3">
                        <Pen /> Updated
                      </TabsTrigger>
                    </TabsList>
                  </Tabs>
                  <Button
                    variant={!showFilters ? `outline` : `secondary`}
                    className="w-9 px-0"
                    onClick={() => {
                      setShowFilters((x) => !x);
                    }}
                  >
                    {!showFilters ? <Sort /> : <Xmark />}
                  </Button>
                </div>
              </div>
              {showFilters && (
                <div className="flex flex-col gap-4">
                  <div className="flex flex-col gap-2">
                    <Label>Title</Label>
                    <Input placeholder="Name" />
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="flex flex-col gap-2">
                      <Label>Directors/Writers</Label>
                      <Input placeholder="Name" />
                    </div>{" "}
                    <div className="flex flex-col gap-2">
                      <Label>Studios</Label>
                      <Input placeholder="Studio Name" />
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div className="flex flex-row flex-wrap gap-4 pt-4">
              {userEntries
                .sort((a, b) => {
                  return b.rating - a.rating;
                })
                .map((userEntry: UserEntry) => {
                  return (
                    <Entry
                      title={userEntry.franchiseName}
                      releaseYear={2023}
                      rating={userEntry.rating}
                      coverUrl={userEntry.coverUrl}
                    />
                  );
                })}
            </div>
          </div>
          <Card className="grid w-[600px] grid-rows-[80px,1fr,60px]">
            <CardHeader className="flex flex-row gap-3">
              <h2 className="text-2xl font-semibold">The Last of Us</h2>
              <div className="text-slate-500">2023</div>
              <div className="ms-auto flex h-full items-start">
                <button>
                  <Xmark />
                </button>
              </div>
            </CardHeader>
            <CardContent className="flex-1">
              <div className="flex h-full w-full flex-col items-center gap-4">
                <div className="flex w-full flex-col space-y-1.5">
                  <Label htmlFor="name">Rating</Label>
                  <div className="flex flex-row justify-center gap-2">
                    <Star className="h-[22px] w-[22px]" />
                    <Star className="h-[22px] w-[22px]" />
                    <Star className="h-[22px] w-[22px]" />
                    <StarOutline className="h-[22px] w-[22px]" />
                    <StarOutline className="h-[22px] w-[22px]" />
                  </div>
                </div>
                <div className="flex h-full w-full flex-col space-y-1.5">
                  <Label htmlFor="framework">Notes</Label>
                  <Textarea
                    id="name"
                    placeholder="Name of your project"
                    className="h-full w-full resize-none"
                  />
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Remove</Button>
              <Button>Save Changes</Button>
            </CardFooter>
          </Card>
        </div>
      </main>
    </>
  );
}
